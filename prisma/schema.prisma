generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Station {
  id          Int          @id @default(autoincrement())
  name        String
  city        String
  country     String
  latitude    Float
  longitude   Float
  createdAt   DateTime     @default(now())
  readings    AirQuality[]

  // optional link to OpenAQ station if synced
  openaqStationId String?  @unique

  // âœ… Added: field to distinguish local vs OpenAQ stations
  source      String       @default("local") // "local" | "openaq"

  // âœ… Added: external ID (used when syncing with OpenAQ)
  externalId  String?      @unique
}

model AirQuality {
  id        String   @id @default(uuid())
  stationId Int
  createdAt DateTime @default(now())
  co        Float?
  no2       Float?
  o3        Float?
  pm10      Float
  pm25      Float
  station   Station  @relation(fields: [stationId], references: [id])

  // âœ… Added: track where this reading came from
  source    String   @default("local") // "local" | "openaq"
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  resource   String
  resourceId String
  changes    Json
  createdAt  DateTime @default(now())
}

/* ---------------------------
   ðŸ”¹ OpenAQ-specific models
--------------------------- */

model OpenAQStation {
  id        String               @id                // OpenAQ's locationId
  name      String
  city      String?
  country   String?
  latitude  Float?
  longitude Float?
  provider  String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  measurements OpenAQMeasurement[]
}

model OpenAQParameter {
  id          Int                 @id                // OpenAQ parameter id
  name        String              @unique            // e.g. "pm25"
  displayName String
  units       String
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  measurements OpenAQMeasurement[]
}

model OpenAQMeasurement {
  id          String          @id @default(uuid())
  stationId   String
  parameterId Int
  value       Float
  dateUtc     DateTime
  createdAt   DateTime @default(now())

  station     OpenAQStation   @relation(fields: [stationId], references: [id])
  parameter   OpenAQParameter @relation(fields: [parameterId], references: [id])
}

model OpenAQSyncLog {
  id        String   @id @default(uuid())
  resource  String   // e.g. "stations", "parameters", "measurements"
  status    String   // success / failed
  details   Json?
  createdAt DateTime @default(now())
}
